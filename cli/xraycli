#! /usr/bin/env python

import sys
import os

import zmq
from tabulate import tabulate
from pandas import DataFrame
import json


class MsgToXnode(object):
    REQ_ID = 0

    def __init__(self, xquery):
        self.xquery = xquery

    def to_json(self, ts=0):
        self.REQ_ID += 1
        return {"req_id": str(self.REQ_ID),
                "widget_id": "xraycli",
                "query": self.xquery,
                "timestamp": int(ts)}


class NoNodesError(Exception):
    pass


def humanize_number(value, fraction_point=1):
    powers = [10 ** x for x in (12, 9, 6, 3, 0)]
    human_powers = ('T', 'B', 'M', 'K', '')
    is_negative = False
    return_value = 0
    
    if not isinstance(value, float):
        value = float(value)
    if value < 0:
        is_negative = True
        value = abs(value)
    for i, p in enumerate(powers):
        if value >= p:
            return_value = str(round(value / (p / (10.0 ** fraction_point))) /
                               (10 ** fraction_point)) + human_powers[i]
            break
    if is_negative:
        return_value = "-" + return_value

    return return_value


class XrayCli(object):
    XRAY_NODES_PATH = '/tmp/xray/'

    def __init__(self):
        self.ctx = None
        self.request = None
        self.nodes_list = self.get_nodes()

    def get_nodes(self):
        try:
            nodes = os.listdir(self.XRAY_NODES_PATH)
            nodes = [[node] for node in nodes]
            nodes.insert(0, ["nodes"])
            return nodes
        except OSError:
            return [["NODE"], []]

    def init_socket(self, node):
        self.ctx = zmq.Context()
        self.request = self.ctx.socket(zmq.REQ)
        # self.request.setsockopt(zmq.IDENTITY, "xraycli-" + str(os.getpid()))
        self.request.setsockopt(zmq.RCVTIMEO, 1000)
        self.request.setsockopt(zmq.SNDTIMEO, 1000)
        self.request.connect('ipc://{}/{}'.format(self.XRAY_NODES_PATH, node))

    def send_recv(self, node, msg, fmt):
        self.init_socket(node)

        # print(">SEND ", node, ": ", msg.to_json())
        # self.request.send(node.encode('ascii'), zmq.SNDMORE)
        self.request.send_json(msg.to_json())
        node_id = self.request.recv_string(encoding='ascii')
        msg = self.request.recv_json()
        # print("<RECV", msg)
        if fmt == 'json':
            return msg
        else:
            return msg["result_set"]

    def get_result_set(self, full_xpath, fmt):
        if full_xpath == '/':
            return self.nodes_list
        if full_xpath[-1] != "/":
            full_xpath += "/"
        node, node_xpath = full_xpath.split('/', 2)[1:]
        if node_xpath == '':
            node_xpath = "/"
        return self.send_recv(node, MsgToXnode(node_xpath), fmt)
    
    def humanize_column(self, column):
        return [humanize_number(int(value)) for value in column]
    
    def huminify_rates(self, df):
        columns = df.columns
        rate_columns = [column for column in columns if column.endswith("-rate")]
        df[rate_columns] = df[rate_columns].apply(self.humanize_column)
        
    def run(self, full_xpath, query, fmt):
        result_set = self.get_result_set(full_xpath, fmt)
        
        if fmt == 'json':
            print(json.dumps(result_set))
        else:
            df = DataFrame.from_records(result_set[1:], columns=result_set[0])
            self.huminify_rates(df)
            if query:
                df = df.query(query)
            print(tabulate(df, headers=df.columns, showindex=False, tablefmt='simple'))

    def close(self):
        try:
            self.request.close()
            self.ctx.destroy()
        except Exception:
            pass


def usage():
    print("usage:")
    print("\txraycli path <pandas-query>")


if __name__ == "__main__":
    fmt = 'table'
    if len(sys.argv) <= 1:
        usage()
        exit(-1)
    xcli = XrayCli()
    try:
        query = None
        if len(sys.argv) > 2:
            query = " ".join(sys.argv[2:])
        if sys.argv[-1] == '--json':
            fmt = 'json'
        xcli.run(sys.argv[1], query, fmt)
    finally:
        xcli.close()


